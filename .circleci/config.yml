version: 2
jobs:
  build:
    docker:
      - image: circleci/node:10.15
    steps:
      - checkout
      - run: yarn install
      - run: yarn build
      - save_cache:
            key: universal-login-{{ .Environment.CIRCLE_SHA1 }}
            paths:
              - ~/project
  lint:
    docker:
      - image: circleci/node:10.15
    steps:
      - restore_cache:
            keys:
                - universal-login-{{ .Environment.CIRCLE_SHA1 }}
      - run: yarn lint
  test_commons:
    docker:
      - image: circleci/node:10.15
    steps:
      - restore_cache:
            keys:
                - universal-login-{{ .Environment.CIRCLE_SHA1 }}
      - run: cd universal-login-commons && yarn test
  test_contracts:
    docker:
      - image: circleci/node:10.15
    steps:
      - restore_cache:
            keys:
                - universal-login-{{ .Environment.CIRCLE_SHA1 }}
      - run: cd universal-login-contracts && yarn test
  test_relayer:
    docker:
      - image: circleci/node:10.15
        environment:
          PG_HOST: localhost
          PG_USER: postgres
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: universal_login_relayer_test
    steps:
      - restore_cache:
            keys:
                - universal-login-{{ .Environment.CIRCLE_SHA1 }}
      - run: cd universal-login-relayer && yarn test
  test_ops:
    docker:
      - image: circleci/node:10.15
        environment:
          PG_HOST: localhost
          PG_USER: postgres
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: universal_login_relayer_test
    steps:
      - restore_cache:
            keys:
                - universal-login-{{ .Environment.CIRCLE_SHA1 }}
      - run: cd universal-login-ops && yarn test
  test_sdk:
    docker:
      - image: circleci/node:10.15
        environment:
          PG_HOST: localhost
          PG_USER: postgres
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: universal_login_relayer_test
    steps:
      - restore_cache:
            keys:
                - universal-login-{{ .Environment.CIRCLE_SHA1 }}
      - run: cd universal-login-sdk && yarn test
  test_example:
    docker:
      - image: circleci/node:10.15
        environment:
          PG_HOST: localhost
          PG_USER: postgres
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: universal_login_relayer_test
    steps:
      - restore_cache:
            keys:
                - universal-login-{{ .Environment.CIRCLE_SHA1 }}
      - run: cd universal-login-example && yarn test
  test_wallet:
    docker:
      - image: circleci/node:10.15
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: universal_login_relayer_test
    steps:
      - restore_cache:
            keys:
                - universal-login-{{ .Environment.CIRCLE_SHA1 }}
      - run: cd universal-login-wallet && yarn test

  build_klab:
    docker:
      - image: circleci/node:10.15
    steps:
      - checkout
      - run: sudo apt-get install make gcc maven openjdk-8-jdk flex pkg-config libmpfr-dev autoconf libtool pandoc zlib1g-dev z3 libz3-dev
      - run: git clone https://github.com/dapphub/klab.git
      - run: |
          cd klab
          make deps
      - run: |
          cd klab
          sudo make link
      - setup_remote_docker:
          docker_layer_caching: true

  run_klab:
    docker:
      - image: circleci/node:10.15
        environment:
          TERM: xterm-256color
      - run: |
          export PATH=$PATH:/usr/local/bin
          export KLAB_EVMS_PATH=/home/circleci/project/klab/evm-semantics
          export TMPDIR=/tmp
          cd universal-login-formal-verification
          make proof

  run_klab_1:
    docker:
      - image: circleci/node:10.15
        environment:
          TERM: xterm-256color
      - run: |
          export PATH=$PATH:/usr/local/bin
          export KLAB_EVMS_PATH=/home/circleci/project/klab/evm-semantics
          export TMPDIR=/tmp
          cd universal-login-formal-verification
          make proof-1

  run_klab_2:
    docker:
      - image: circleci/node:10.15
        environment:
          TERM: xterm-256color
      - run: |
          export PATH=$PATH:/usr/local/bin
          export KLAB_EVMS_PATH=/home/circleci/project/klab/evm-semantics
          export TMPDIR=/tmp
          cd universal-login-formal-verification
          make proof-2

  run_klab_3:
    docker:
      - image: circleci/node:10.15
        environment:
          TERM: xterm-256color
      - run: |
          export PATH=$PATH:/usr/local/bin
          export KLAB_EVMS_PATH=/home/circleci/project/klab/evm-semantics
          export TMPDIR=/tmp
          cd universal-login-formal-verification
          make proof-3

  run_klab_4:
    docker:
      - image: circleci/node:10.15
        environment:
          TERM: xterm-256color
      - run: |
          export PATH=$PATH:/usr/local/bin
          export KLAB_EVMS_PATH=/home/circleci/project/klab/evm-semantics
          export TMPDIR=/tmp
          cd universal-login-formal-verification
          make proof-4

workflows:
  version: 2
  nightly_formal_verification:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - run_klab
  fv_test:
    jobs:
      - run_klab_1:
          filters:
            branches:
              only:
                - /fv.*/
      - run_klab_2:
          filters:
            branches:
              only: /fv.*/
      - run_klab_3:
          filters:
            branches:
              only: /fv.*/
      - run_klab_4:
          filters:
            branches:
              only: /fv.*/
  universal_login_all:
    jobs:
      - build
      - test_commons:
          requires:
            - build
      - test_contracts:
          requires:
            - build
      - test_example:
          requires:
            - build
      - test_ops:
          requires:
            - build
      - test_relayer:
          requires:
            - build
      - test_sdk:
          requires:
            - build
      - test_wallet:
          requires:
            - build
      - lint:
          requires:
            - build


